# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load historical price data (replace 'your_data.csv' with your actual file)
data = pd.read_csv('your_data.csv')

# Data Preprocessing
# Assuming you have a 'Date' and 'Price' column in your dataset
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Feature Engineering (example: 7-day moving average)
data['MA_7'] = data['Price'].rolling(window=7).mean()

# Drop NaN values introduced by the moving average calculation
data.dropna(inplace=True)

# Split the data into training and testing sets
train_size = int(len(data) * 0.8)
train, test = data[0:train_size], data[train_size:]

# Features and target variable
X_train, y_train = train[['MA_7']], train['Price']
X_test, y_test = test[['MA_7']], test['Price']

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Visualization
plt.figure(figsize=(12, 6))
plt.plot(train.index, train['Price'], label='Training Data')
plt.plot(test.index, test['Price'], label='Actual Prices')
plt.plot(test.index, predictions, label='Predicted Prices', linestyle='dashed')
plt.legend()
plt.title('Price Forecasting with Linear Regression')
plt.show()
